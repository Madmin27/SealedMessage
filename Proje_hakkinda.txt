# ChronoMessage ⏳📩

ChronoMessage, **Zama FHE protokolü** üzerinde çalışan, **zaman kilitli mesajlaşma** (time-locked messaging) dApp’idir.  
Kullanıcılar mesaj gönderir, mesajlar zincir üzerinde saklanır ve yalnızca **belirlenen tarihten / blok numarasından sonra** açılabilir.  
Uzun vadede mesajların **FHE ile şifrelenerek** tamamen gizli kalması sağlanacaktır.

---

## 🚀 Özellikler
- Mesajlar blockchain üzerinde tutulur.
- Mesaj yalnızca belirtilen `unlockTime` geçtikten sonra okunabilir.
- Başlangıçta basit (plain text), daha sonra **FHE şifreleme** entegrasyonu yapılacak.
- Gelecek yol haritası: NFT satışı, contract event’i gibi zincir olaylarına bağlı mesaj açılımı.

---

## 🛠 Teknoloji Stack
- **Akıllı kontratlar** → Solidity (Zama FHEVM uyumlu EVM chain)
- **Blockchain geliştirme** → Hardhat (Node.js)
- **Frontend** → Next.js (React + Ethers.js)
- **Şifreleme** → [Zama FHE kütüphaneleri](https://docs.zama.ai/) (TFHE-rs, Concrete, FHEVM)
- **Dil** → Rust (kriptografi) + JavaScript/TypeScript (frontend/kontrat etkileşimleri)

---

## 📦 Kurulum

### 1. Gereksinimler
- Ubuntu 24.04
- Node.js v20+
- Rust (cargo ile)
- Git

### 2. Ortamı Kur
```bash
sudo apt update && sudo apt upgrade -y
sudo apt install -y curl git build-essential pkg-config libssl-dev

# Node.js
curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
sudo apt install -y nodejs

# Rust
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
source $HOME/.cargo/env


Repo Hazırlık
git clone <repo-url>
cd chrono-message
npm install

Hardhat Başlat
npx hardhat compile
npx hardhat test

İlk Kontrat (PoC)

contracts/ChronoMessage.sol

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

contract ChronoMessage {
    struct Message {
        address sender;
        uint256 unlockTime;
        string content;
    }

    mapping(uint256 => Message) public messages;
    uint256 public messageCount;

    function sendMessage(string memory content, uint256 unlockTime) external {
        require(unlockTime > block.timestamp, "Unlock time must be in the future");
        messages[messageCount] = Message(msg.sender, unlockTime, content);
        messageCount++;
    }

    function readMessage(uint256 id) external view returns (string memory) {
        Message memory m = messages[id];
        require(block.timestamp >= m.unlockTime, "Message still locked");
        return m.content;
    }
}



Yol Haritası

 Zaman kilitli mesaj (PoC)

 FHE ile mesaj şifreleme (TFHE-rs / FHEVM)

 Frontend UI (Next.js + Ethers.js)

 Gelişmiş kilit mekanizmaları (NFT satışı, contract event tetikleyici)

 Ana ağa deploy

📚 Kaynaklar

Zama Protocol Docs

Concrete

TFHE-rs

Hardhat
