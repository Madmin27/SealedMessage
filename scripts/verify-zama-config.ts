import { ethers } from "hardhat";
import { createInstance, SepoliaConfig } from "@zama-fhe/relayer-sdk/node";
import { applySepoliaRelayerOverrides } from "config/zamaSepolia";

/**
 * Zama konfig√ºrasyonunu doƒürulama scripti
 * Bu script ≈üunlarƒ± kontrol eder:
 * 1. SDK konfig√ºrasyonu
 * 2. S√∂zle≈üme konfig√ºrasyonu
 * 3. ACL/KMS adres e≈üle≈ümeleri
 * 4. Relayer baƒülantƒ±sƒ±
 * 5. Public key durumu
 */
async function main() {
  console.log("\nüîç Zama FHE Konfig√ºrasyon Doƒürulama\n");
  console.log("=" .repeat(60));

  // 1. SDK Konfig√ºrasyonunu Kontrol Et
  const relayerConfig = applySepoliaRelayerOverrides(SepoliaConfig);

  console.log("\nüì¶ 1. SDK Konfig√ºrasyonu:");
  console.log("-".repeat(60));
  console.log("ACL Address:              ", relayerConfig.aclContractAddress);
  console.log("KMS Address:              ", relayerConfig.kmsContractAddress);
  console.log("Input Verifier:           ", relayerConfig.inputVerifierContractAddress);
  console.log("Gateway Chain ID:         ", relayerConfig.gatewayChainId);
  console.log("Relayer URL:              ", relayerConfig.relayerUrl);
  console.log("Network RPC:              ", relayerConfig.network);

  // 2. S√∂zle≈üme Bilgileri
  console.log("\nüìù 2. Deploy Edilen S√∂zle≈ümeler:");
  console.log("-".repeat(60));
  
  const confidentialMessageAddr = "0x07b4314c9cC7478F665416425d8d5B80Ba610eB1";
  const chronoMessageZamaAddr = "0x65016d7E35EC1830d599991d82381bf03eEC2987";
  
  console.log("ConfidentialMessage:      ", confidentialMessageAddr);
  console.log("ChronoMessageZama:        ", chronoMessageZamaAddr);

  // 3. FHE Instance Olu≈ütur
  console.log("\nüîê 3. FHE Instance Kontrol√º:");
  console.log("-".repeat(60));
  
  try {
  const instance = await createInstance(relayerConfig);
    console.log("‚úÖ FHE Instance olu≈üturuldu");
    
    const publicKeyInfo = instance.getPublicKey();
    if (publicKeyInfo) {
      console.log("‚úÖ Public Key alƒ±ndƒ±");
      console.log("   Public Key ID:         ", publicKeyInfo.publicKeyId);
      console.log("   Public Key Size:       ", publicKeyInfo.publicKey.length, "bytes");
    } else {
      console.log("‚ö†Ô∏è  Public Key bilgisi yok");
    }
  } catch (error: any) {
    console.error("‚ùå FHE Instance hatasƒ±:", error.message);
  }

  // 4. S√∂zle≈üme Durumu Kontrol Et
  console.log("\nüìã 4. S√∂zle≈üme On-Chain Durumu:");
  console.log("-".repeat(60));

  const [signer] = await ethers.getSigners();
  console.log("Signer Address:           ", signer.address);

  try {
    const ConfidentialMessage = await ethers.getContractAt(
      "ConfidentialMessage",
      confidentialMessageAddr
    );

    const messageCount = await ConfidentialMessage.messageCount();
    console.log("‚úÖ S√∂zle≈üme eri≈üilebilir");
    console.log("   Message Count:         ", messageCount.toString());

    // Protocol ID kontrol et
    const protocolId = await ConfidentialMessage.protocolId();
    console.log("   Protocol ID:           ", protocolId.toString());
    console.log("   Expected (Sepolia):     10001");
    
    if (protocolId.toString() !== "10001") {
      console.log("‚ö†Ô∏è  Protocol ID e≈üle≈ümiyor!");
    } else {
      console.log("‚úÖ Protocol ID doƒüru");
    }

  } catch (error: any) {
    console.error("‚ùå S√∂zle≈üme eri≈üim hatasƒ±:", error.message);
  }

  // 5. Test ≈ûifreleme
  console.log("\nüîí 5. Test ≈ûifreleme:");
  console.log("-".repeat(60));

  try {
  const instance = await createInstance(relayerConfig);
    const testValue = 123456789n;
    
    const encrypted = await instance
      .createEncryptedInput(confidentialMessageAddr, signer.address)
      .add64(testValue)
      .encrypt();

    console.log("‚úÖ ≈ûifreleme ba≈üarƒ±lƒ±");
    console.log("   Handle Type:           ", typeof encrypted.handles[0]);
    console.log("   Handle Size:           ", encrypted.handles[0].length, "bytes");
    console.log("   Proof Type:            ", typeof encrypted.inputProof);
    console.log("   Proof Size:            ", encrypted.inputProof.length, "bytes");

    // Handle'ƒ± hex'e √ßevir
    const handleHex = '0x' + Buffer.from(encrypted.handles[0]).toString('hex');
    const proofHex = '0x' + Buffer.from(encrypted.inputProof).toString('hex');
    
    console.log("\n   Handle (hex):          ", handleHex);
    console.log("   Proof (hex, ilk 66):   ", proofHex.substring(0, 66) + "...");

  } catch (error: any) {
    console.error("‚ùå ≈ûifreleme hatasƒ±:", error.message);
  }

  // 6. ACL S√∂zle≈ümesi Kontrol Et
  console.log("\nüîê 6. ACL S√∂zle≈ümesi Kontrol√º:");
  console.log("-".repeat(60));

  try {
    const aclAbi = [
      "function allowed(address, address) external view returns (bool)",
      "function allowedOneBit(address, address) external view returns (bool)"
    ];

    const ACL = new ethers.Contract(
      relayerConfig.aclContractAddress,
      aclAbi,
      signer
    );

    // ACL eri≈üilebilir mi kontrol et
    const code = await ethers.provider.getCode(relayerConfig.aclContractAddress);
    if (code === "0x" || code === "0x0") {
      console.log("‚ùå ACL s√∂zle≈ümesi deploy edilmemi≈ü!");
    } else {
      console.log("‚úÖ ACL s√∂zle≈ümesi deploy edilmi≈ü");
      console.log("   Bytecode Size:         ", code.length, "chars");
    }

  } catch (error: any) {
    console.error("‚ùå ACL kontrol hatasƒ±:", error.message);
  }

  // 7. Relayer Baƒülantƒ± Testi
  console.log("\nüåê 7. Relayer Baƒülantƒ± Testi:");
  console.log("-".repeat(60));

  try {
  const relayerUrl = relayerConfig.relayerUrl;
    const response = await fetch(`${relayerUrl}/v1/keyurl`);
    
    if (response.ok) {
      const data = await response.json();
      console.log("‚úÖ Relayer eri≈üilebilir");
      console.log("   Status:                ", data.status);
      console.log("   FHE Keys Count:        ", data.response?.fhe_key_info?.length || 0);
    } else {
      console.log("‚ö†Ô∏è  Relayer response:", response.status, response.statusText);
    }
  } catch (error: any) {
    console.error("‚ùå Relayer baƒülantƒ± hatasƒ±:", error.message);
  }

  // √ñzet
  console.log("\n" + "=".repeat(60));
  console.log("üìä √ñZET");
  console.log("=".repeat(60));
  console.log(`
‚úÖ Kontrol Edilen:
   - SDK konfig√ºrasyonu
   - S√∂zle≈üme deployment
   - FHE instance olu≈üturma
   - ≈ûifreleme i≈ülemi
   - ACL s√∂zle≈ümesi
   - Relayer baƒülantƒ±sƒ±

‚ö†Ô∏è  Bilinen Sorun:
   - sendMessage √ßaƒürƒ±larƒ± revert ediyor
   - FHE.fromExternal() proof'larƒ± kabul etmiyor
   
üìù Sonraki Adƒ±mlar:
   1. Zama destek ekibi ile ileti≈üime ge√ß
   2. S√∂zle≈üme kayƒ±t durumunu √∂ƒüren
   3. ZAMA_TROUBLESHOOTING.md dosyasƒ±nƒ± oku
   4. Discord: https://discord.gg/zama

üí° Bu script'in √ßƒ±ktƒ±sƒ±nƒ± Zama destek ekibi ile payla≈üabilirsiniz.
  `);
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error("\n‚ùå Fatal Error:", error);
    process.exit(1);
  });
