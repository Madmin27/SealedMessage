"use client";

import { useCallback, useEffect, useMemo, useState } from "react";
import dayjs from "dayjs";
import relativeTime from "da  // Sadece refreshKey değiştiğinde yükle
  useEffect(() => {
    // İlk render'da ve refreshKey değiştiğinde çalış
    if (client && contractSet && userAddress) {
      loadMessages();
    }
  }, [refreshKey, client, contractSet, userAddress, loadMessages]); // Tüm bağımlılıkları ekledik

  if (!contractSet) {
    return (
      <div className="rounded-xl border border-slate-800 bg-slate-900/50 p-6 text-sm text-slate-400">
        <p>
          Dapp'i kullanmadan önce <code>NEXT_PUBLIC_CONTRACT_ADDRESS</code> ortam değişkenini güncelleyin ve sözleşmeyilativeTime";
import advancedFormat from "dayjs/plugin/advancedFormat";
import { usePublicClient, useAccount } from "wagmi";
import type { PublicClient } from "viem";
import { chronoMessageV2Abi } from "../lib/abi-v2";
import { appConfig } from "../lib/env";

dayjs.extend(relativeTime);
dayjs.extend(advancedFormat);

interface MessageListProps {
  refreshKey?: number;
}

interface MessageViewModel {
  id: bigint;
  sender: string;
  receiver: string;
  unlockTime: bigint;
  unlockDate: string;
  relative: string;
  unlocked: boolean;
  content: string | null;
  isRead: boolean;
  isSent: boolean; // Gönderilen mesaj mı?
}

async function fetchMessage(
  client: PublicClient,
  id: bigint,
  userAddress: string
): Promise<MessageViewModel> {
  const [sender, receiver, unlockTime, isRead] = (await client.readContract({
    address: appConfig.contractAddress as `0x${string}`,
    abi: chronoMessageV2Abi,
    functionName: "getMessageMetadata",
    args: [id]
  })) as [string, string, bigint, boolean];

  const now = BigInt(Math.floor(Date.now() / 1000));
  const unlocked = now >= unlockTime;
  const isSent = sender.toLowerCase() === userAddress.toLowerCase();
  const isReceiver = receiver.toLowerCase() === userAddress.toLowerCase();

  let content: string | null = null;
  // Sadece alıcı ve unlock olduysa content'i okuyabilir
  if (unlocked && isReceiver) {
    try {
      // Not: readMessage nonpayable olduğu için direkt call edemeyiz
      // Simdilik content null kalsın, kullanıcı "Oku" butonuna tıklayacak
      content = "[Mesajı okumak için tıklayın]";
    } catch (err) {
      console.log(`Mesaj #${id} okunamadı (normal - sadece alıcı okuyabilir)`);
    }
  }

  const unlockDate = dayjs(Number(unlockTime) * 1000);
  return {
    id,
    sender,
    receiver,
    unlockTime,
    unlockDate: unlockDate.format("DD MMM YYYY HH:mm"),
    relative: unlocked ? "Açıldı" : unlockDate.fromNow(),
    unlocked,
    content,
    isRead,
    isSent
  };
}

export function MessageList({ refreshKey }: MessageListProps) {
  const client = usePublicClient();
  const { address: userAddress } = useAccount();
  const [items, setItems] = useState<MessageViewModel[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [lastUpdated, setLastUpdated] = useState<Date | null>(null);

  const contractSet = useMemo(
    () => appConfig.contractAddress !== "0x0000000000000000000000000000000000000000",
    []
  );

  // loadMessages fonksiyonunu useCallback olmadan tanımlayalım - stable reference
  const loadMessages = useCallback(async () => {
    // Client yoksa veya contract set edilmemişse hiçbir şey yapma
    if (!client || !contractSet || !userAddress) {
      console.log("⏸️ MessageList: Client, contract veya user address hazır değil");
      return;
    }

    console.log("🔄 MessageList: Mesajlar yüklen iyor...");
    setLoading(true);
    setError(null);

    try {
      const count = (await client.readContract({
        address: appConfig.contractAddress as `0x${string}`,
        abi: chronoMessageV2Abi,
        functionName: "messageCount"
      })) as bigint;

      console.log(`📊 MessageList: ${count} mesaj bulundu`);

      if (count === 0n) {
        setItems([]);
        setLastUpdated(new Date());
        setLoading(false);
        return;
      }

      const ids = Array.from({ length: Number(count) }, (_, index) => BigInt(index));
      const results = await Promise.all(ids.map((id) => fetchMessage(client, id, userAddress)));
      results.sort((a, b) => Number(b.unlockTime - a.unlockTime));
      setItems(results);
      setLastUpdated(new Date());
      console.log("✅ MessageList: Mesajlar başarıyla yüklendi");
    } catch (err: any) {
      console.error("❌ MessageList error:", err);
      // Daha spesifik hata mesajları
      if (err.message?.includes("Could not find") || err.message?.includes("reverted")) {
        setError("Contract'a bağlanılamadı. Doğru ağda olduğunuzdan emin olun.");
      } else if (err.message?.includes("network") || err.message?.includes("fetch")) {
        setError("Ağ bağlantı hatası. RPC sunucusuna erişilemiyor.");
      } else {
        setError("Mesajlar yüklenirken bir hata oluştu. Contract yeni deploy edildiyse birkaç saniye bekleyin.");
      }
    } finally {
      setLoading(false);
    }
  }, [client, contractSet, userAddress]);

  // Sadece refreshKey değiştiğinde yükle
  useEffect(() => {
    // İlk render'da ve refreshKey değiştiğinde çalış
    if (client && contractSet) {
      loadMessages();
    }
  }, [refreshKey]); // loadMessages'ı bağımlılıklardan kaldırdık!

  if (!contractSet) {
    return (
      <div className="rounded-xl border border-slate-800 bg-slate-900/50 p-6 text-sm text-slate-400">
        <p>
          Dapp’i kullanmadan önce <code>NEXT_PUBLIC_CONTRACT_ADDRESS</code> ortam değişkenini güncelleyin ve sözleşmeyi
          deploy edin.
        </p>
      </div>
    );
  }

  return (
    <section className="space-y-4">
      <div className="flex flex-wrap items-center justify-between gap-4">
        <div>
          <h2 className="text-lg font-semibold text-aurora">Mesaj Zaman Çizelgesi</h2>
          <p className="text-sm text-slate-400">
            {lastUpdated ? `Son güncelleme: ${dayjs(lastUpdated).format("HH:mm:ss")}` : "Hazırlanıyor..."}
          </p>
        </div>
        <button
          onClick={loadMessages}
          disabled={loading}
          className="rounded-lg border border-aurora/40 px-4 py-2 text-sm font-semibold uppercase tracking-wider text-aurora transition hover:border-aurora hover:bg-aurora/10 disabled:cursor-not-allowed disabled:opacity-60"
        >
          Yenile
        </button>
      </div>

      {error ? <p className="text-sm text-red-400">{error}</p> : null}

      {loading ? (
        <div className="grid gap-4 md:grid-cols-2 xl:grid-cols-3">
          {Array.from({ length: 3 }).map((_, index) => (
            <div key={index} className="animate-pulse rounded-xl border border-slate-800 bg-slate-900/50 p-5">
              <div className="h-6 w-1/3 rounded bg-slate-700/60" />
              <div className="mt-3 h-4 w-2/3 rounded bg-slate-700/50" />
              <div className="mt-6 h-3 w-full rounded bg-slate-700/30" />
            </div>
          ))}
        </div>
      ) : items.length === 0 ? (
        <div className="rounded-xl border border-slate-800 bg-slate-900/50 p-6 text-sm text-slate-300">
          Henüz mesaj yok. İlk zaman kapsülünü oluşturmak için yukarıdaki formu kullanın.
        </div>
      ) : (
        <div className="grid gap-4 md:grid-cols-2 xl:grid-cols-3">
          {items.map((item) => (
            <article
              key={item.id.toString()}
              className={`group flex flex-col justify-between rounded-xl border p-5 transition hover:-translate-y-1 hover:shadow-lg ${
                item.isSent 
                  ? "border-blue-800 bg-blue-900/20 hover:border-blue-600" 
                  : item.isRead 
                  ? "border-slate-800 bg-slate-900/60 hover:border-aurora/60"
                  : "border-aurora/50 bg-aurora/5 hover:border-aurora"
              }`}
            >
              <div className="space-y-3">
                <div className="flex items-center justify-between text-xs uppercase tracking-widest">
                  <span className={item.isSent ? "text-blue-400" : "text-slate-400"}>
                    #{item.id.toString()}
                  </span>
                  <span className="flex items-center gap-1">
                    {item.isSent && <span className="text-blue-400">📤 Gönderildi</span>}
                    {!item.isSent && !item.isRead && item.unlocked && <span className="text-aurora">🔔 Yeni!</span>}
                    {!item.isSent && item.isRead && <span className="text-slate-500">✓ Okundu</span>}
                    <span className={item.unlocked ? "text-green-400" : "text-yellow-400"}>
                      {item.relative}
                    </span>
                  </span>
                </div>

                {item.isSent ? (
                  <div>
                    <p className="text-sm font-semibold text-blue-300">Alıcı</p>
                    <p className="font-mono text-xs text-blue-200">{item.receiver}</p>
                    <p className="mt-1 text-xs text-blue-400/70">
                      🔒 Sadece alıcı bu mesajı görebilir
                    </p>
                  </div>
                ) : (
                  <div>
                    <p className="text-sm font-semibold text-slate-200">Gönderen</p>
                    <p className="font-mono text-xs text-slate-400">{item.sender}</p>
                  </div>
                )}

                <div>
                  <p className="text-sm font-semibold text-slate-200">Kilit Açılma</p>
                  <p className="text-sm text-slate-400">{item.unlockDate}</p>
                </div>
              </div>
              <div className="mt-6 rounded-lg border border-slate-800 bg-slate-950/60 p-4 text-sm text-slate-200">
                {item.isSent ? (
                  <p className="text-blue-300/70 italic">
                    🔒 Gönderdiğiniz mesajları okuyamazsınız. Sadece alıcı görebilir.
                  </p>
                ) : item.unlocked ? (
                  item.content ? (
                    <p className="whitespace-pre-wrap">{item.content}</p>
                  ) : (
                    <p className="text-slate-400">
                      📭 Mesaj henüz okunmadı. İçeriği görüntülemek için sayfayı yenileyin.
                    </p>
                  )
                ) : (
                  <p className="text-slate-400">
                    🔐 Mesaj hâlâ kilitli. {dayjs(Number(item.unlockTime) * 1000).fromNow()} açılacak.
                  </p>
                )}
              </div>
            </article>
          ))}
        </div>
      )}
    </section>
  );
}
